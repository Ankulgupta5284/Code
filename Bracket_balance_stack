#include<iostream>
#include<stack>
using namespace std;

   bool ispar(string &str) {
    stack<char> st;

    for (int i = 0; i < str.length(); i++) {
        if (str[i] == '(' || str[i] == '[' || str[i] == '{') {
            st.push(str[i]);
        } else if (str[i] == ')' || str[i] == ']' || str[i] == '}') {
            if (st.empty()) {
                return false;  // Closing bracket without a matching opening bracket
            } else if ((str[i] == ')' && st.top() == '(') ||
                       (str[i] == ']' && st.top() == '[') ||
                       (str[i] == '}' && st.top() == '{')) {
                st.pop();  // Matching opening bracket found
            } else {
                return false;  // Mismatched brackets
            }
        }
    }

    return st.empty();  // If stack is empty, all brackets are balanced
}
int main(){
	string str="()[]{{}}";
	bool ans=ispar(str);
	cout<<ans;
	
	
	
	
	
	return 0;
	}
